{
  "api": "TMF635_Usage",
  "version": "v4.0.0",
  "endpoints": [
    {
      "name": "listUsage",
      "type": "GET",
      "path": "/usage",
      "description": "This operation list or find Usage entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "usage"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createUsage",
      "type": "POST",
      "path": "/usage",
      "description": "This operation creates a Usage entity.",
      "parameters": [
        {
          "name": "usage",
          "required": true,
          "description": "The Usage to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Usage_Create"
          }
        }
      ],
      "tags": [
        "usage"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveUsage",
      "type": "GET",
      "path": "/usage/{id}",
      "description": "This operation retrieves a Usage entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Usage",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "usage"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchUsage",
      "type": "PATCH",
      "path": "/usage/{id}",
      "description": "This operation updates partially a Usage entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Usage",
          "in": "path"
        },
        {
          "name": "usage",
          "required": true,
          "description": "The Usage to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Usage_Update"
          }
        }
      ],
      "tags": [
        "usage"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteUsage",
      "type": "DELETE",
      "path": "/usage/{id}",
      "description": "This operation deletes a Usage entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Usage",
          "in": "path"
        }
      ],
      "tags": [
        "usage"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listUsageSpecification",
      "type": "GET",
      "path": "/usageSpecification",
      "description": "Retrieves a list of UsageSpecification entities. You can filter the results by specifying parameters.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response. Use comma to separate multiple properties."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Define the starting point from where the list of entities should be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Limit the number of entities returned in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested UsageSpecification entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createUsageSpecification",
      "type": "POST",
      "path": "/usageSpecification",
      "description": "Creates a new UsageSpecification entity. The new entity's details should be included in the request body.",
      "parameters": [
        {
          "name": "usageSpecification",
          "required": true,
          "description": "The details of the UsageSpecification entity to be created. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UsageSpecification_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the created UsageSpecification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveUsageSpecification",
      "type": "GET",
      "path": "/usageSpecification/{id}",
      "description": "Retrieves a specific UsageSpecification entity based on its identifier. You can specify the properties you want to include in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The identifier of the UsageSpecification entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response. Use comma to separate multiple properties."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the requested UsageSpecification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchUsageSpecification",
      "type": "PATCH",
      "path": "/usageSpecification/{id}",
      "description": "Updates a specific UsageSpecification entity partially. The identifier of the entity and the details to be updated should be included in the request.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The identifier of the UsageSpecification entity you want to update."
        },
        {
          "name": "usageSpecification",
          "required": true,
          "description": "The details to be updated in the UsageSpecification entity. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UsageSpecification_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the updated UsageSpecification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteUsageSpecification",
      "type": "DELETE",
      "path": "/usageSpecification/{id}",
      "description": "Deletes a specific UsageSpecification entity based on its identifier.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The identifier of the UsageSpecification entity you want to delete."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object confirming the deletion of the UsageSpecification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "This endpoint is used to set the communication endpoint address that the service instance will use to deliver updates about its health state, execution state, failures, and metrics.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter contains the callback endpoint data that will be used to deliver the updates. The data should adhere to the EventSubscriptionInput schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response indicates that the listener has been registered and will receive updates."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "This endpoint is used to remove the communication endpoint address that the service instance has been using to deliver updates.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "This parameter is the unique identifier of the registered listener that you want to unregister."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response indicates that the listener has been unregistered and will no longer receive updates."
      },
      "errors": [
        "400: Bad request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method not allowed",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUsageCreateEvent",
      "type": "POST",
      "path": "/listener/usageCreateEvent",
      "description": "This endpoint is an example of a client listener that receives the UsageCreateEvent notification.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter contains the event data for the UsageCreateEvent. The data should adhere to the UsageCreateEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response indicates that the UsageCreateEvent notification has been received."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUsageAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/usageAttributeValueChangeEvent",
      "description": "This endpoint is an example of a client listener that receives the UsageAttributeValueChangeEvent notification.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter contains the event data for the UsageAttributeValueChangeEvent. The data should adhere to the UsageAttributeValueChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response indicates that the UsageAttributeValueChangeEvent notification has been received."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUsageDeleteEvent",
      "type": "POST",
      "path": "/listener/usageDeleteEvent",
      "description": "This endpoint is an example of a client listener that receives the UsageDeleteEvent notification.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter contains the event data for the UsageDeleteEvent. The data should adhere to the UsageDeleteEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response indicates that the UsageDeleteEvent notification has been received."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUsageStateChangeEvent",
      "type": "POST",
      "path": "/listener/usageStateChangeEvent",
      "description": "Example of a client listener for receiving the notification UsageStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UsageStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUsageSpecificationCreateEvent",
      "type": "POST",
      "path": "/listener/usageSpecificationCreateEvent",
      "description": "Example of a client listener for receiving the notification UsageSpecificationCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UsageSpecificationCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUsageSpecificationAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/usageSpecificationAttributeValueChangeEvent",
      "description": "Example of a client listener for receiving the notification UsageSpecificationAttributeValueChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UsageSpecificationAttributeValueChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUsageSpecificationDeleteEvent",
      "type": "POST",
      "path": "/listener/usageSpecificationDeleteEvent",
      "description": "Example of a client listener for receiving the notification UsageSpecificationDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UsageSpecificationDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    }
  ]
}