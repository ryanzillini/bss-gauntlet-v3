{
  "api": "TMF664_Resource_Function_Activation",
  "version": "v4.0.0",
  "endpoints": [
    {
      "name": "listResourceFunction",
      "type": "GET",
      "path": "/resourceFunction",
      "description": "Fetches a list of ResourceFunction entities. You can filter the results by specifying the desired fields, offset, and limit in the query parameters.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response, separated by commas."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index from where the list of ResourceFunction entities should be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of ResourceFunction entities to return in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested ResourceFunction entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createResourceFunction",
      "type": "POST",
      "path": "/resourceFunction",
      "description": "Creates a new ResourceFunction entity. The new entity's details should be included in the request body.",
      "parameters": [
        {
          "name": "resourceFunction",
          "required": true,
          "description": "The details of the ResourceFunction entity to be created, provided in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceFunction_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the newly created ResourceFunction entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveResourceFunction",
      "type": "GET",
      "path": "/resourceFunction/{id}",
      "description": "Fetches a specific ResourceFunction entity by its ID. You can specify the desired fields in the query parameters.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the ResourceFunction entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response, separated by commas."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the requested ResourceFunction entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchResourceFunction",
      "type": "PATCH",
      "path": "/resourceFunction/{id}",
      "description": "Updates a specific ResourceFunction entity partially by its ID. The updated details should be included in the request body.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the ResourceFunction entity you want to update."
        },
        {
          "name": "resourceFunction",
          "required": true,
          "description": "The updated details of the ResourceFunction entity, provided in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceFunction_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the updated ResourceFunction entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteResourceFunction",
      "type": "DELETE",
      "path": "/resourceFunction/{id}",
      "description": "Deletes a specific ResourceFunction entity by its ID.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the ResourceFunction entity you want to delete."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object confirming the deletion of the ResourceFunction entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listMonitor",
      "type": "GET",
      "path": "/monitor",
      "description": "Fetches a list of Monitor entities. You can filter the returned data by specifying certain fields.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the fields you want included in the response, separated by commas."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index from where the list of Monitor entities should be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of Monitor entities to return in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested Monitor entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveMonitor",
      "type": "GET",
      "path": "/monitor/{id}",
      "description": "Fetches a specific Monitor entity by its unique identifier. You can specify which attributes to include in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the Monitor entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the fields you want included in the response, separated by commas."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested Monitor entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listHeal",
      "type": "GET",
      "path": "/heal",
      "description": "Fetches a list of Heal entities. You can filter the returned data by specifying certain fields.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the fields you want included in the response, separated by commas."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index from where the list of Heal entities should be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of Heal entities to return in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested Heal entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createHeal",
      "type": "POST",
      "path": "/heal",
      "description": "Creates a new Heal entity and returns the created entity in the response.",
      "parameters": [
        {
          "name": "heal",
          "required": true,
          "description": "The Heal entity to be created. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Heal_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the newly created Heal entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveHeal",
      "type": "GET",
      "path": "/heal/{id}",
      "description": "Fetches a specific Heal entity by its unique identifier. You can specify which attributes to include in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the Heal entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the fields you want included in the response, separated by commas."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested Heal entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listScale",
      "type": "GET",
      "path": "/scale",
      "description": "This operation list or find Scale entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "scale"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createScale",
      "type": "POST",
      "path": "/scale",
      "description": "This operation creates a Scale entity.",
      "parameters": [
        {
          "name": "scale",
          "required": true,
          "description": "The Scale to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Scale_Create"
          }
        }
      ],
      "tags": [
        "scale"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveScale",
      "type": "GET",
      "path": "/scale/{id}",
      "description": "This operation retrieves a Scale entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Scale",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "scale"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listMigrate",
      "type": "GET",
      "path": "/migrate",
      "description": "This operation list or find Migrate entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "migrate"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createMigrate",
      "type": "POST",
      "path": "/migrate",
      "description": "This operation creates a Migrate entity.",
      "parameters": [
        {
          "name": "migrate",
          "required": true,
          "description": "The Migrate to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Migrate_Create"
          }
        }
      ],
      "tags": [
        "migrate"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveMigrate",
      "type": "GET",
      "path": "/migrate/{id}",
      "description": "This endpoint retrieves a specific Migrate entity based on the provided ID. You can also specify which attributes you want to retrieve by providing a comma-separated list of attribute names.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the Migrate entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "A comma-separated list of attribute names you want to retrieve. If not provided, all first-level attributes will be included in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "The requested Migrate entity. If the entity does not exist, you will receive a 404 error."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "This endpoint allows you to register a communication endpoint that the service will use to send updates about its health state, execution state, failures, and metrics.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The data containing the callback endpoint where the service will send updates.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EventSubscriptionInput"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "Confirmation that the listener has been successfully registered. If the registration fails, you will receive an error."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "This endpoint allows you to unregister a previously registered communication endpoint, stopping the service from sending updates to it.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the listener you want to unregister."
        }
      ],
      "response": {
        "type": "object",
        "description": "Confirmation that the listener has been successfully unregistered. If the unregistration fails, you will receive an error."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToResourceFunctionCreateEvent",
      "type": "POST",
      "path": "/listener/resourceFunctionCreateEvent",
      "description": "This endpoint is an example of a client listener that receives notifications when a ResourceFunctionCreateEvent occurs.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data that the service sends when a ResourceFunctionCreateEvent occurs.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceFunctionCreateEvent"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "Confirmation that the notification has been successfully received. If the notification fails, you will receive an error."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToResourceFunctionAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/resourceFunctionAttributeValueChangeEvent",
      "description": "This endpoint is an example of a client listener that receives notifications when a ResourceFunctionAttributeValueChangeEvent occurs.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data that the service sends when a ResourceFunctionAttributeValueChangeEvent occurs.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceFunctionAttributeValueChangeEvent"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "Confirmation that the notification has been successfully received. If the notification fails, you will receive an error."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToResourceFunctionStateChangeEvent",
      "type": "POST",
      "path": "/listener/resourceFunctionStateChangeEvent",
      "description": "This endpoint allows a client to listen for and receive notifications about changes in the state of a resource function.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "The event data that contains the details of the state change in the resource function."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification about the state change has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToResourceFunctionDeleteEvent",
      "type": "POST",
      "path": "/listener/resourceFunctionDeleteEvent",
      "description": "This endpoint allows a client to listen for and receive notifications about the deletion of a resource function.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "The event data that contains the details of the deleted resource function."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification about the deletion has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToMonitorCreateEvent",
      "type": "POST",
      "path": "/listener/monitorCreateEvent",
      "description": "This endpoint allows a client to listen for and receive notifications about the creation of a new monitor.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "The event data that contains the details of the newly created monitor."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification about the creation has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToMonitorAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/monitorAttributeValueChangeEvent",
      "description": "This endpoint allows a client to listen for and receive notifications about changes in the attribute values of a monitor.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "The event data that contains the details of the attribute value change in the monitor."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification about the attribute value change has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToMonitorStateChangeEvent",
      "type": "POST",
      "path": "/listener/monitorStateChangeEvent",
      "description": "This endpoint allows a client to listen for and receive notifications about changes in the state of a monitor.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "The event data that contains the details of the state change in the monitor."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification about the state change has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToMonitorDeleteEvent",
      "type": "POST",
      "path": "/listener/monitorDeleteEvent",
      "description": "Example of a client listener for receiving the notification MonitorDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/MonitorDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToHealCreateEvent",
      "type": "POST",
      "path": "/listener/healCreateEvent",
      "description": "Example of a client listener for receiving the notification HealCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/HealCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToHealAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/healAttributeValueChangeEvent",
      "description": "Example of a client listener for receiving the notification HealAttributeValueChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/HealAttributeValueChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToHealStateChangeEvent",
      "type": "POST",
      "path": "/listener/healStateChangeEvent",
      "description": "Example of a client listener for receiving the notification HealStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/HealStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToHealDeleteEvent",
      "type": "POST",
      "path": "/listener/healDeleteEvent",
      "description": "Example of a client listener for receiving the notification HealDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/HealDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToScaleCreateEvent",
      "type": "POST",
      "path": "/listener/scaleCreateEvent",
      "description": "This endpoint allows a client to listen for the ScaleCreateEvent notification. When a new scale is created, the client will be notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data that contains the details of the scale created. The data should follow the ScaleCreateEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the client has been successfully notified of the event."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToScaleAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/scaleAttributeValueChangeEvent",
      "description": "This endpoint allows a client to listen for the ScaleAttributeValueChangeEvent notification. When a scale's attribute value changes, the client will be notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data that contains the details of the scale attribute value change. The data should follow the ScaleAttributeValueChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the client has been successfully notified of the event."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToScaleStateChangeEvent",
      "type": "POST",
      "path": "/listener/scaleStateChangeEvent",
      "description": "This endpoint allows a client to listen for the ScaleStateChangeEvent notification. When a scale's state changes, the client will be notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data that contains the details of the scale state change. The data should follow the ScaleStateChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the client has been successfully notified of the event."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToScaleDeleteEvent",
      "type": "POST",
      "path": "/listener/scaleDeleteEvent",
      "description": "This endpoint allows a client to listen for the ScaleDeleteEvent notification. When a scale is deleted, the client will be notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data that contains the details of the scale deletion. The data should follow the ScaleDeleteEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the client has been successfully notified of the event."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToMigrateCreateEvent",
      "type": "POST",
      "path": "/listener/migrateCreateEvent",
      "description": "This endpoint allows a client to listen for the MigrateCreateEvent notification. When a migration process is initiated, the client will be notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data that contains the details of the migration process. The data should follow the MigrateCreateEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the client has been successfully notified of the event."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToMigrateAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/migrateAttributeValueChangeEvent",
      "description": "Example of a client listener for receiving the notification MigrateAttributeValueChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/MigrateAttributeValueChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToMigrateStateChangeEvent",
      "type": "POST",
      "path": "/listener/migrateStateChangeEvent",
      "description": "Example of a client listener for receiving the notification MigrateStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/MigrateStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToMigrateDeleteEvent",
      "type": "POST",
      "path": "/listener/migrateDeleteEvent",
      "description": "Example of a client listener for receiving the notification MigrateDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/MigrateDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    }
  ]
}