{
  "api": "TMF707_Test_Result",
  "version": "v4.0.0",
  "endpoints": [
    {
      "name": "listTestCaseResult",
      "type": "GET",
      "path": "/testCaseResult",
      "description": "This operation list or find TestCaseResult entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "testCaseResult"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createTestCaseResult",
      "type": "POST",
      "path": "/testCaseResult",
      "description": "This operation creates a TestCaseResult entity.",
      "parameters": [
        {
          "name": "testCaseResult",
          "required": true,
          "description": "The TestCaseResult to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestCaseResult_Create"
          }
        }
      ],
      "tags": [
        "testCaseResult"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveTestCaseResult",
      "type": "GET",
      "path": "/testCaseResult/{id}",
      "description": "This operation retrieves a TestCaseResult entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the TestCaseResult",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "testCaseResult"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchTestCaseResult",
      "type": "PATCH",
      "path": "/testCaseResult/{id}",
      "description": "This operation updates partially a TestCaseResult entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the TestCaseResult",
          "in": "path"
        },
        {
          "name": "testCaseResult",
          "required": true,
          "description": "The TestCaseResult to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestCaseResult_Update"
          }
        }
      ],
      "tags": [
        "testCaseResult"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteTestCaseResult",
      "type": "DELETE",
      "path": "/testCaseResult/{id}",
      "description": "This operation deletes a TestCaseResult entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the TestCaseResult",
          "in": "path"
        }
      ],
      "tags": [
        "testCaseResult"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listTestSuiteResult",
      "type": "GET",
      "path": "/testSuiteResult",
      "description": "This operation list or find TestSuiteResult entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "testSuiteResult"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createTestSuiteResult",
      "type": "POST",
      "path": "/testSuiteResult",
      "description": "This operation creates a TestSuiteResult entity.",
      "parameters": [
        {
          "name": "testSuiteResult",
          "required": true,
          "description": "The TestSuiteResult to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestSuiteResult_Create"
          }
        }
      ],
      "tags": [
        "testSuiteResult"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveTestSuiteResult",
      "type": "GET",
      "path": "/testSuiteResult/{id}",
      "description": "This operation retrieves a TestSuiteResult entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the TestSuiteResult",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "testSuiteResult"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchTestSuiteResult",
      "type": "PATCH",
      "path": "/testSuiteResult/{id}",
      "description": "This operation updates partially a TestSuiteResult entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the TestSuiteResult",
          "in": "path"
        },
        {
          "name": "testSuiteResult",
          "required": true,
          "description": "The TestSuiteResult to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestSuiteResult_Update"
          }
        }
      ],
      "tags": [
        "testSuiteResult"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteTestSuiteResult",
      "type": "DELETE",
      "path": "/testSuiteResult/{id}",
      "description": "This operation deletes a TestSuiteResult entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the TestSuiteResult",
          "in": "path"
        }
      ],
      "tags": [
        "testSuiteResult"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listNonFunctionalTestResult",
      "type": "GET",
      "path": "/nonFunctionalTestResult",
      "description": "This operation list or find NonFunctionalTestResult entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "nonFunctionalTestResult"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createNonFunctionalTestResult",
      "type": "POST",
      "path": "/nonFunctionalTestResult",
      "description": "This operation creates a NonFunctionalTestResult entity.",
      "parameters": [
        {
          "name": "nonFunctionalTestResult",
          "required": true,
          "description": "The NonFunctionalTestResult to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/NonFunctionalTestResult_Create"
          }
        }
      ],
      "tags": [
        "nonFunctionalTestResult"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveNonFunctionalTestResult",
      "type": "GET",
      "path": "/nonFunctionalTestResult/{id}",
      "description": "This operation retrieves a NonFunctionalTestResult entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the NonFunctionalTestResult",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "nonFunctionalTestResult"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchNonFunctionalTestResult",
      "type": "PATCH",
      "path": "/nonFunctionalTestResult/{id}",
      "description": "This operation updates partially a NonFunctionalTestResult entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the NonFunctionalTestResult",
          "in": "path"
        },
        {
          "name": "nonFunctionalTestResult",
          "required": true,
          "description": "The NonFunctionalTestResult to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/NonFunctionalTestResult_Update"
          }
        }
      ],
      "tags": [
        "nonFunctionalTestResult"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteNonFunctionalTestResult",
      "type": "DELETE",
      "path": "/nonFunctionalTestResult/{id}",
      "description": "This operation deletes a NonFunctionalTestResult entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the NonFunctionalTestResult",
          "in": "path"
        }
      ],
      "tags": [
        "nonFunctionalTestResult"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "Data containing the callback endpoint to deliver the information",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EventSubscriptionInput"
          }
        }
      ],
      "tags": [
        "events subscription"
      ],
      "response": {
        "type": "object",
        "description": "Subscribed"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The id of the registered listener",
          "in": "path"
        }
      ],
      "tags": [
        "events subscription"
      ],
      "errors": [
        "400: Bad request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method not allowed",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToTestCaseResultCreateEvent",
      "type": "POST",
      "path": "/listener/testCaseResultCreateEvent",
      "description": "Example of a client listener for receiving the notification TestCaseResultCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestCaseResultCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToTestCaseResultChangeEvent",
      "type": "POST",
      "path": "/listener/testCaseResultChangeEvent",
      "description": "Example of a client listener for receiving the notification TestCaseResultChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestCaseResultChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToTestCaseResultDeleteEvent",
      "type": "POST",
      "path": "/listener/testCaseResultDeleteEvent",
      "description": "Example of a client listener for receiving the notification TestCaseResultDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestCaseResultDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToTestSuiteResultCreateEvent",
      "type": "POST",
      "path": "/listener/testSuiteResultCreateEvent",
      "description": "Example of a client listener for receiving the notification TestSuiteResultCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestSuiteResultCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToTestSuiteResultChangeEvent",
      "type": "POST",
      "path": "/listener/testSuiteResultChangeEvent",
      "description": "Example of a client listener for receiving the notification TestSuiteResultChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestSuiteResultChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToTestSuiteResultDeleteEvent",
      "type": "POST",
      "path": "/listener/testSuiteResultDeleteEvent",
      "description": "Example of a client listener for receiving the notification TestSuiteResultDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/TestSuiteResultDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToNonFunctionalTestResultCreateEvent",
      "type": "POST",
      "path": "/listener/nonFunctionalTestResultCreateEvent",
      "description": "Example of a client listener for receiving the notification NonFunctionalTestResultCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/NonFunctionalTestResultCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToNonFunctionalTestResultChangeEvent",
      "type": "POST",
      "path": "/listener/nonFunctionalTestResultChangeEvent",
      "description": "Example of a client listener for receiving the notification NonFunctionalTestResultChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/NonFunctionalTestResultChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToNonFunctionalTestResultDeleteEvent",
      "type": "POST",
      "path": "/listener/nonFunctionalTestResultDeleteEvent",
      "description": "Example of a client listener for receiving the notification NonFunctionalTestResultDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/NonFunctionalTestResultDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    }
  ]
}