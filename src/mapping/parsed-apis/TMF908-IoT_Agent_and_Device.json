{
  "api": "TMF908-IoT_Agent_and_Device",
  "version": "unknown",
  "endpoints": [
    {
      "name": "listIotDevice",
      "type": "GET",
      "path": "/iotDevice",
      "description": "This operation list or find IotDevice entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotDevice"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createIotDevice",
      "type": "POST",
      "path": "/iotDevice",
      "description": "This operation creates a IotDevice entity.",
      "parameters": [
        {
          "name": "iotDevice",
          "required": true,
          "description": "The IotDevice to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDevice_Create"
          }
        }
      ],
      "tags": [
        "iotDevice"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveIotDevice",
      "type": "GET",
      "path": "/iotDevice/{id}",
      "description": "This operation retrieves a IotDevice entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotDevice",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotDevice"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchIotDevice",
      "type": "PATCH",
      "path": "/iotDevice/{id}",
      "description": "This operation updates partially a IotDevice entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotDevice",
          "in": "path"
        },
        {
          "name": "iotDevice",
          "required": true,
          "description": "The IotDevice to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDevice_Update"
          }
        }
      ],
      "tags": [
        "iotDevice"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteIotDevice",
      "type": "DELETE",
      "path": "/iotDevice/{id}",
      "description": "This operation deletes a IotDevice entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotDevice",
          "in": "path"
        }
      ],
      "tags": [
        "iotDevice"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listDataAccessEndpoint",
      "type": "GET",
      "path": "/dataAccessEndpoint",
      "description": "This operation list or find DataAccessEndpoint entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "dataAccessEndpoint"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveDataAccessEndpoint",
      "type": "GET",
      "path": "/dataAccessEndpoint/{id}",
      "description": "This operation retrieves a DataAccessEndpoint entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the DataAccessEndpoint",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "dataAccessEndpoint"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listIotDeviceSpecification",
      "type": "GET",
      "path": "/iotDeviceSpecification",
      "description": "This operation list or find IotDeviceSpecification entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotDeviceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createIotDeviceSpecification",
      "type": "POST",
      "path": "/iotDeviceSpecification",
      "description": "This operation creates a IotDeviceSpecification entity.",
      "parameters": [
        {
          "name": "iotDeviceSpecification",
          "required": true,
          "description": "The IotDeviceSpecification to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceSpecification_Create"
          }
        }
      ],
      "tags": [
        "iotDeviceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveIotDeviceSpecification",
      "type": "GET",
      "path": "/iotDeviceSpecification/{id}",
      "description": "This operation retrieves a IotDeviceSpecification entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotDeviceSpecification",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotDeviceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchIotDeviceSpecification",
      "type": "PATCH",
      "path": "/iotDeviceSpecification/{id}",
      "description": "This operation updates partially a IotDeviceSpecification entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotDeviceSpecification",
          "in": "path"
        },
        {
          "name": "iotDeviceSpecification",
          "required": true,
          "description": "The IotDeviceSpecification to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceSpecification_Update"
          }
        }
      ],
      "tags": [
        "iotDeviceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteIotDeviceSpecification",
      "type": "DELETE",
      "path": "/iotDeviceSpecification/{id}",
      "description": "This operation deletes a IotDeviceSpecification entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotDeviceSpecification",
          "in": "path"
        }
      ],
      "tags": [
        "iotDeviceSpecification"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listIotDataEvent",
      "type": "GET",
      "path": "/iotDataEvent",
      "description": "This operation list or find IotDataEvent entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotDataEvent"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveIotDataEvent",
      "type": "GET",
      "path": "/iotDataEvent/{id}",
      "description": "This operation retrieves a IotDataEvent entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotDataEvent",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotDataEvent"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listIotManagementEvent",
      "type": "GET",
      "path": "/iotManagementEvent",
      "description": "This operation list or find IotManagementEvent entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotManagementEvent"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveIotManagementEvent",
      "type": "GET",
      "path": "/iotManagementEvent/{id}",
      "description": "This operation retrieves a IotManagementEvent entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the IotManagementEvent",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "iotManagementEvent"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listResourceSpecification",
      "type": "GET",
      "path": "/resourceSpecification",
      "description": "This operation list or find ResourceSpecification entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "resourceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createResourceSpecification",
      "type": "POST",
      "path": "/resourceSpecification",
      "description": "This operation creates a ResourceSpecification entity.",
      "parameters": [
        {
          "name": "resourceSpecification",
          "required": true,
          "description": "The ResourceSpecification to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceSpecification_Create"
          }
        }
      ],
      "tags": [
        "resourceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveResourceSpecification",
      "type": "GET",
      "path": "/resourceSpecification/{id}",
      "description": "This operation retrieves a ResourceSpecification entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the ResourceSpecification",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "resourceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchResourceSpecification",
      "type": "PATCH",
      "path": "/resourceSpecification/{id}",
      "description": "This operation updates partially a ResourceSpecification entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the ResourceSpecification",
          "in": "path"
        },
        {
          "name": "resourceSpecification",
          "required": true,
          "description": "The ResourceSpecification to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceSpecification_Update"
          }
        }
      ],
      "tags": [
        "resourceSpecification"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteResourceSpecification",
      "type": "DELETE",
      "path": "/resourceSpecification/{id}",
      "description": "This operation deletes a ResourceSpecification entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the ResourceSpecification",
          "in": "path"
        }
      ],
      "tags": [
        "resourceSpecification"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listAlarm",
      "type": "GET",
      "path": "/alarm",
      "description": "This operation list or find Alarm entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "alarm"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createAlarm",
      "type": "POST",
      "path": "/alarm",
      "description": "This operation creates a Alarm entity.",
      "parameters": [
        {
          "name": "alarm",
          "required": true,
          "description": "The Alarm to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Alarm_Create"
          }
        }
      ],
      "tags": [
        "alarm"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveAlarm",
      "type": "GET",
      "path": "/alarm/{id}",
      "description": "This operation retrieves a Alarm entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Alarm",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "alarm"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchAlarm",
      "type": "PATCH",
      "path": "/alarm/{id}",
      "description": "This operation updates partially a Alarm entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Alarm",
          "in": "path"
        },
        {
          "name": "alarm",
          "required": true,
          "description": "The Alarm to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Alarm_Update"
          }
        }
      ],
      "tags": [
        "alarm"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "Data containing the callback endpoint to deliver the information",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EventSubscriptionInput"
          }
        }
      ],
      "tags": [
        "events subscription"
      ],
      "response": {
        "type": "object",
        "description": "Subscribed"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The id of the registered listener",
          "in": "path"
        }
      ],
      "tags": [
        "events subscription"
      ],
      "errors": [
        "400: Bad request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method not allowed",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceCreateEvent",
      "type": "POST",
      "path": "/listener/iotDeviceCreateEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceChangeEvent",
      "type": "POST",
      "path": "/listener/iotDeviceChangeEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceBatchEvent",
      "type": "POST",
      "path": "/listener/iotDeviceBatchEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceBatchEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceBatchEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceDeleteEvent",
      "type": "POST",
      "path": "/listener/iotDeviceDeleteEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceHeartBeatEvent",
      "type": "POST",
      "path": "/listener/iotDeviceHeartBeatEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceHeartBeatEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceHeartBeatEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceStateChangeEvent",
      "type": "POST",
      "path": "/listener/iotDeviceStateChangeEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceSpecificationCreateEvent",
      "type": "POST",
      "path": "/listener/iotDeviceSpecificationCreateEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceSpecificationCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceSpecificationCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceSpecificationChangeEvent",
      "type": "POST",
      "path": "/listener/iotDeviceSpecificationChangeEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceSpecificationChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceSpecificationChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceSpecificationBatchEvent",
      "type": "POST",
      "path": "/listener/iotDeviceSpecificationBatchEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceSpecificationBatchEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceSpecificationBatchEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToIotDeviceSpecificationDeleteEvent",
      "type": "POST",
      "path": "/listener/iotDeviceSpecificationDeleteEvent",
      "description": "Example of a client listener for receiving the notification IotDeviceSpecificationDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/IotDeviceSpecificationDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToResourceSpecificationCreateEvent",
      "type": "POST",
      "path": "/listener/resourceSpecificationCreateEvent",
      "description": "Example of a client listener for receiving the notification ResourceSpecificationCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceSpecificationCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToResourceSpecificationChangeEvent",
      "type": "POST",
      "path": "/listener/resourceSpecificationChangeEvent",
      "description": "Example of a client listener for receiving the notification ResourceSpecificationChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceSpecificationChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToResourceSpecificationBatchEvent",
      "type": "POST",
      "path": "/listener/resourceSpecificationBatchEvent",
      "description": "Example of a client listener for receiving the notification ResourceSpecificationBatchEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceSpecificationBatchEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToResourceSpecificationDeleteEvent",
      "type": "POST",
      "path": "/listener/resourceSpecificationDeleteEvent",
      "description": "Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ResourceSpecificationDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToAlarmCreateEvent",
      "type": "POST",
      "path": "/listener/alarmCreateEvent",
      "description": "Example of a client listener for receiving the notification AlarmCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AlarmCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToAlarmChangeEvent",
      "type": "POST",
      "path": "/listener/alarmChangeEvent",
      "description": "Example of a client listener for receiving the notification AlarmChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AlarmChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToAlarmDeleteEvent",
      "type": "POST",
      "path": "/listener/alarmDeleteEvent",
      "description": "Example of a client listener for receiving the notification AlarmDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AlarmDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    }
  ]
}