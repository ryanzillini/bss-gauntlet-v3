{
  "api": "TMF680_Recommendation",
  "version": "v4.0.0",
  "endpoints": [
    {
      "name": "listQueryProductRecommendation",
      "type": "GET",
      "path": "/queryProductRecommendation",
      "description": "This endpoint retrieves a list of QueryProductRecommendation entities. You can customize the response by specifying certain fields, offset, and limit in the request parameters.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response. These should be comma-separated."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Define the starting point from where the list of resources will be provided in the response."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Define the maximum number of resources to be provided in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested QueryProductRecommendation entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createQueryProductRecommendation",
      "type": "POST",
      "path": "/queryProductRecommendation",
      "description": "This endpoint allows you to create a new QueryProductRecommendation entity.",
      "parameters": [
        {
          "name": "queryProductRecommendation",
          "required": true,
          "description": "The QueryProductRecommendation entity to be created. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/QueryProductRecommendation_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the newly created QueryProductRecommendation entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveQueryProductRecommendation",
      "type": "GET",
      "path": "/queryProductRecommendation/{id}",
      "description": "This endpoint retrieves a specific QueryProductRecommendation entity based on its ID. You can customize the response by specifying certain fields in the request parameters.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the QueryProductRecommendation entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response. These should be comma-separated."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested QueryProductRecommendation entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "This endpoint allows you to register a communication endpoint for the service instance to deliver information about its health state, execution state, failures, and metrics.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The data containing the callback endpoint where the service instance will deliver the information. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EventSubscriptionInput"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will confirm that the listener has been registered."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "This endpoint allows you to unregister a previously registered communication endpoint, stopping the service instance from delivering information to it.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the registered listener you want to unregister."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will confirm that the listener has been unregistered."
      },
      "errors": [
        "400: Bad request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method not allowed",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToQueryProductRecommendationCreateEvent",
      "type": "POST",
      "path": "/listener/queryProductRecommendationCreateEvent",
      "description": "Example of a client listener for receiving the notification QueryProductRecommendationCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/QueryProductRecommendationCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToQueryProductRecommendationStateChangeEvent",
      "type": "POST",
      "path": "/listener/queryProductRecommendationStateChangeEvent",
      "description": "Example of a client listener for receiving the notification QueryProductRecommendationStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/QueryProductRecommendationStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    }
  ]
}