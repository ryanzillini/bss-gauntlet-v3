{
  "api": "TMF679_Product_Offering_Qualification",
  "version": "v99.0.0",
  "endpoints": [
    {
      "name": "listProductOfferingQualification",
      "type": "GET",
      "path": "/productOfferingQualification",
      "description": "This endpoint retrieves a list of ProductOfferingQualification entities. It allows for specific fields to be returned, and for the results to be paginated.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response, separated by commas."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index from where the list of resources will be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of resources to be returned in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return the requested ProductOfferingQualification entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createProductOfferingQualification",
      "type": "POST",
      "path": "/productOfferingQualification",
      "description": "This endpoint creates a new ProductOfferingQualification entity.",
      "parameters": [
        {
          "name": "productOfferingQualification",
          "required": true,
          "description": "The ProductOfferingQualification object that needs to be added to the database.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ProductOfferingQualification_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return the created ProductOfferingQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveProductOfferingQualification",
      "type": "GET",
      "path": "/productOfferingQualification/{id}",
      "description": "This endpoint retrieves a specific ProductOfferingQualification entity based on its unique ID. You can also specify which fields to include in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the ProductOfferingQualification entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response, separated by commas."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return the requested ProductOfferingQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchProductOfferingQualification",
      "type": "PATCH",
      "path": "/productOfferingQualification/{id}",
      "description": "This endpoint allows you to update a specific ProductOfferingQualification entity partially based on its unique ID.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the ProductOfferingQualification entity you want to update."
        },
        {
          "name": "productOfferingQualification",
          "required": true,
          "description": "The updated ProductOfferingQualification object.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ProductOfferingQualification_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return the updated ProductOfferingQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteProductOfferingQualification",
      "type": "DELETE",
      "path": "/productOfferingQualification/{id}",
      "description": "This endpoint deletes a specific ProductOfferingQualification entity based on its unique ID.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the ProductOfferingQualification entity you want to delete."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will confirm the deletion of the ProductOfferingQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "Data containing the callback endpoint to deliver the information",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EventSubscriptionInput"
          }
        }
      ],
      "tags": [
        "events subscription"
      ],
      "response": {
        "type": "object",
        "description": "Subscribed"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The id of the registered listener",
          "in": "path"
        }
      ],
      "tags": [
        "events subscription"
      ],
      "errors": [
        "400: Bad request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method not allowed",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToProductOfferingQualificationCreateEvent",
      "type": "POST",
      "path": "/listener/productOfferingQualificationCreateEvent",
      "description": "Example of a client listener for receiving the notification ProductOfferingQualificationCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ProductOfferingQualificationCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToProductOfferingQualificationAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/productOfferingQualificationAttributeValueChangeEvent",
      "description": "Example of a client listener for receiving the notification ProductOfferingQualificationAttributeValueChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ProductOfferingQualificationAttributeValueChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToProductOfferingQualificationStateChangeEvent",
      "type": "POST",
      "path": "/listener/productOfferingQualificationStateChangeEvent",
      "description": "Example of a client listener for receiving the notification ProductOfferingQualificationStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ProductOfferingQualificationStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToProductOfferingQualificationDeleteEvent",
      "type": "POST",
      "path": "/listener/productOfferingQualificationDeleteEvent",
      "description": "Example of a client listener for receiving the notification ProductOfferingQualificationDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ProductOfferingQualificationDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToProductOfferingQualificationInformationRequiredEvent",
      "type": "POST",
      "path": "/listener/productOfferingQualificationInformationRequiredEvent",
      "description": "Example of a client listener for receiving the notification ProductOfferingQualificationInformationRequiredEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/ProductOfferingQualificationInformationRequiredEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    }
  ]
}