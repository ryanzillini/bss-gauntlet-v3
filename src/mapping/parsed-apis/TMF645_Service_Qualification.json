{
  "api": "TMF645_Service_Qualification",
  "version": "v4.0.1",
  "endpoints": [
    {
      "name": "listCheckServiceQualification",
      "type": "GET",
      "path": "/checkServiceQualification",
      "description": "This endpoint retrieves a list of CheckServiceQualification entities. It can also be used to search for specific entities based on certain criteria.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response. These should be comma-separated."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Use this parameter to set the starting point within the list of entities for the data that is returned in the response."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Use this parameter to limit the number of entities returned in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested CheckServiceQualification entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createCheckServiceQualification",
      "type": "POST",
      "path": "/checkServiceQualification",
      "description": "This endpoint creates a new CheckServiceQualification entity.",
      "parameters": [
        {
          "name": "checkServiceQualification",
          "required": true,
          "description": "The CheckServiceQualification object that needs to be added to the database.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CheckServiceQualification_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the newly created CheckServiceQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveCheckServiceQualification",
      "type": "GET",
      "path": "/checkServiceQualification/{id}",
      "description": "This endpoint retrieves a specific CheckServiceQualification entity based on its unique identifier. All first level attributes of the entity can be selected.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the CheckServiceQualification entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response. These should be comma-separated."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested CheckServiceQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchCheckServiceQualification",
      "type": "PATCH",
      "path": "/checkServiceQualification/{id}",
      "description": "This endpoint updates a specific CheckServiceQualification entity partially based on its unique identifier.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the CheckServiceQualification entity you want to update."
        },
        {
          "name": "checkServiceQualification",
          "required": true,
          "description": "The CheckServiceQualification object that contains the updated data.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CheckServiceQualification_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the updated CheckServiceQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteCheckServiceQualification",
      "type": "DELETE",
      "path": "/checkServiceQualification/{id}",
      "description": "This endpoint deletes a specific CheckServiceQualification entity based on its unique identifier.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the CheckServiceQualification entity you want to delete."
        }
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listQueryServiceQualification",
      "type": "GET",
      "path": "/queryServiceQualification",
      "description": "This endpoint retrieves a list of QueryServiceQualification entities. You can filter the results by specifying certain fields, offset, and limit in the query parameters.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response, separated by commas."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Define the starting point from where the list of entities should be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Define the maximum number of entities to be returned in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested QueryServiceQualification entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createQueryServiceQualification",
      "type": "POST",
      "path": "/queryServiceQualification",
      "description": "This endpoint creates a new QueryServiceQualification entity. You need to provide the necessary details in the request body.",
      "parameters": [
        {
          "name": "queryServiceQualification",
          "required": true,
          "description": "The details of the QueryServiceQualification entity to be created, provided in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/QueryServiceQualification_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the created QueryServiceQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveQueryServiceQualification",
      "type": "GET",
      "path": "/queryServiceQualification/{id}",
      "description": "This endpoint retrieves a specific QueryServiceQualification entity by its ID. You can specify the fields you want to include in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the QueryServiceQualification entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want to include in the response, separated by commas."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the requested QueryServiceQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchQueryServiceQualification",
      "type": "PATCH",
      "path": "/queryServiceQualification/{id}",
      "description": "This endpoint updates a specific QueryServiceQualification entity partially. You need to provide the ID of the entity and the details to be updated in the request body.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the QueryServiceQualification entity you want to update."
        },
        {
          "name": "queryServiceQualification",
          "required": true,
          "description": "The details to be updated in the QueryServiceQualification entity, provided in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/QueryServiceQualification_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the details of the updated QueryServiceQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteQueryServiceQualification",
      "type": "DELETE",
      "path": "/queryServiceQualification/{id}",
      "description": "This endpoint deletes a specific QueryServiceQualification entity. You need to provide the ID of the entity you want to delete.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the QueryServiceQualification entity you want to delete."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object confirming the deletion of the QueryServiceQualification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "Data containing the callback endpoint to deliver the information",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EventSubscriptionInput"
          }
        }
      ],
      "tags": [
        "events subscription"
      ],
      "response": {
        "type": "object",
        "description": "Subscribed"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The id of the registered listener",
          "in": "path"
        }
      ],
      "tags": [
        "events subscription"
      ],
      "errors": [
        "400: Bad request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method not allowed",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToCheckServiceQualificationCreateEvent",
      "type": "POST",
      "path": "/listener/checkServiceQualificationCreateEvent",
      "description": "Example of a client listener for receiving the notification CheckServiceQualificationCreateEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CheckServiceQualificationCreateEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToCheckServiceQualificationAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/checkServiceQualificationAttributeValueChangeEvent",
      "description": "Example of a client listener for receiving the notification CheckServiceQualificationAttributeValueChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CheckServiceQualificationAttributeValueChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToCheckServiceQualificationStateChangeEvent",
      "type": "POST",
      "path": "/listener/checkServiceQualificationStateChangeEvent",
      "description": "Example of a client listener for receiving the notification CheckServiceQualificationStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CheckServiceQualificationStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToCheckServiceQualificationDeleteEvent",
      "type": "POST",
      "path": "/listener/checkServiceQualificationDeleteEvent",
      "description": "This endpoint allows a client to listen for the CheckServiceQualificationDeleteEvent notification. It is typically used to receive updates when a service qualification check is deleted.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which includes details about the service qualification check that was deleted. This data should match the CheckServiceQualificationDeleteEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification was received and processed."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToCheckServiceQualificationInformationRequiredEvent",
      "type": "POST",
      "path": "/listener/checkServiceQualificationInformationRequiredEvent",
      "description": "This endpoint allows a client to listen for the CheckServiceQualificationInformationRequiredEvent notification. It is typically used to receive updates when additional information is required for a service qualification check.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which includes details about the service qualification check that requires additional information. This data should match the CheckServiceQualificationInformationRequiredEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification was received and processed."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToQueryServiceQualificationCreateEvent",
      "type": "POST",
      "path": "/listener/queryServiceQualificationCreateEvent",
      "description": "This endpoint allows a client to listen for the QueryServiceQualificationCreateEvent notification. It is typically used to receive updates when a new service qualification query is created.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which includes details about the newly created service qualification query. This data should match the QueryServiceQualificationCreateEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification was received and processed."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToQueryServiceQualificationStateChangeEvent",
      "type": "POST",
      "path": "/listener/queryServiceQualificationStateChangeEvent",
      "description": "This endpoint allows a client to listen for the QueryServiceQualificationStateChangeEvent notification. It is typically used to receive updates when the state of a service qualification query changes.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which includes details about the service qualification query whose state has changed. This data should match the QueryServiceQualificationStateChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification was received and processed."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToQueryServiceQualificationDeleteEvent",
      "type": "POST",
      "path": "/listener/queryServiceQualificationDeleteEvent",
      "description": "This endpoint allows a client to listen for the QueryServiceQualificationDeleteEvent notification. It is typically used to receive updates when a service qualification query is deleted.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which includes details about the service qualification query that was deleted. This data should match the QueryServiceQualificationDeleteEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the notification was received and processed."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    }
  ]
}