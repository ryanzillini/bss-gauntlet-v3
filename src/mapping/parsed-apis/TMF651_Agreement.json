{
  "api": "TMF651_Agreement",
  "version": "v4.0.0",
  "endpoints": [
    {
      "name": "listAgreement",
      "type": "GET",
      "path": "/agreement",
      "description": "Fetches a list of Agreement entities. You can filter the results by specifying parameters.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response. Use a comma to separate multiple properties."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index from where the list of Agreement entities should be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of Agreement entities that should be returned in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested Agreement entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createAgreement",
      "type": "POST",
      "path": "/agreement",
      "description": "Creates a new Agreement entity and returns the created entity.",
      "parameters": [
        {
          "name": "agreement",
          "required": true,
          "description": "The Agreement entity to be created. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Agreement_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return the created Agreement entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveAgreement",
      "type": "GET",
      "path": "/agreement/{id}",
      "description": "Fetches a specific Agreement entity by its ID. You can specify the properties you want included in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the Agreement entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response. Use a comma to separate multiple properties."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return the requested Agreement entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchAgreement",
      "type": "PATCH",
      "path": "/agreement/{id}",
      "description": "Updates a specific Agreement entity partially by its ID and returns the updated entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the Agreement entity you want to update."
        },
        {
          "name": "agreement",
          "required": true,
          "description": "The updated Agreement entity. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Agreement_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return the updated Agreement entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteAgreement",
      "type": "DELETE",
      "path": "/agreement/{id}",
      "description": "Deletes a specific Agreement entity by its ID.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the Agreement entity you want to delete."
        }
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listAgreementSpecification",
      "type": "GET",
      "path": "/agreementSpecification",
      "description": "Fetches a list of AgreementSpecification entities. You can filter the results by specifying parameters.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response, separated by commas."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index from where the list of resources will be returned in the response."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of resources to be returned in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested AgreementSpecification entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createAgreementSpecification",
      "type": "POST",
      "path": "/agreementSpecification",
      "description": "Creates a new AgreementSpecification entity.",
      "parameters": [
        {
          "name": "agreementSpecification",
          "required": true,
          "description": "The AgreementSpecification entity to be created. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AgreementSpecification_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the created AgreementSpecification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveAgreementSpecification",
      "type": "GET",
      "path": "/agreementSpecification/{id}",
      "description": "Fetches a specific AgreementSpecification entity by its ID. You can specify which attributes to include in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the AgreementSpecification entity to be retrieved."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want included in the response, separated by commas."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested AgreementSpecification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchAgreementSpecification",
      "type": "PATCH",
      "path": "/agreementSpecification/{id}",
      "description": "Partially updates an existing AgreementSpecification entity by its ID.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the AgreementSpecification entity to be updated."
        },
        {
          "name": "agreementSpecification",
          "required": true,
          "description": "The updated AgreementSpecification entity. This should be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AgreementSpecification_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the updated AgreementSpecification entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteAgreementSpecification",
      "type": "DELETE",
      "path": "/agreementSpecification/{id}",
      "description": "Deletes a specific AgreementSpecification entity by its ID.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the AgreementSpecification entity to be deleted."
        }
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "This endpoint allows you to set the communication endpoint address that the service instance will use to deliver updates about its health state, execution state, failures, and metrics.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter should contain the callback endpoint to which the service instance will deliver the information. The data should follow the EventSubscriptionInput schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "If successful, the response will confirm that the listener has been subscribed."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "This endpoint allows you to remove the communication endpoint address that the service instance has been using to deliver updates.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "This parameter should be the ID of the listener you wish to unregister."
        }
      ],
      "response": {
        "type": "object",
        "description": "If successful, the response will confirm that the listener has been unsubscribed."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToAgreementCreateEvent",
      "type": "POST",
      "path": "/listener/agreementCreateEvent",
      "description": "This endpoint is an example of a client listener for receiving the notification AgreementCreateEvent.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter should contain the event data. The data should follow the AgreementCreateEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "If successful, the response will confirm that the notification has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToAgreementAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/agreementAttributeValueChangeEvent",
      "description": "This endpoint is an example of a client listener for receiving the notification AgreementAttributeValueChangeEvent.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter should contain the event data. The data should follow the AgreementAttributeValueChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "If successful, the response will confirm that the notification has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToAgreementStateChangeEvent",
      "type": "POST",
      "path": "/listener/agreementStateChangeEvent",
      "description": "This endpoint is an example of a client listener for receiving the notification AgreementStateChangeEvent.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "This parameter should contain the event data. The data should follow the AgreementStateChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "If successful, the response will confirm that the notification has been received."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request."
      ]
    },
    {
      "name": "listenToAgreementDeleteEvent",
      "type": "POST",
      "path": "/listener/agreementDeleteEvent",
      "description": "This endpoint allows a client to listen for an AgreementDeleteEvent notification. When an agreement is deleted, this event is triggered and the client is notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data which contains the details of the deleted agreement."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the client has been notified of the agreement deletion."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "listenToAgreementSpecificationCreateEvent",
      "type": "POST",
      "path": "/listener/agreementSpecificationCreateEvent",
      "description": "This endpoint allows a client to listen for an AgreementSpecificationCreateEvent notification. When an agreement specification is created, this event is triggered and the client is notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data which contains the details of the created agreement specification."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the client has been notified of the agreement specification creation."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "listenToAgreementSpecificationAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/agreementSpecificationAttributeValueChangeEvent",
      "description": "This endpoint allows a client to listen for an AgreementSpecificationAttributeValueChangeEvent notification. When an attribute value of an agreement specification changes, this event is triggered and the client is notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data which contains the details of the changed attribute value in the agreement specification."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the client has been notified of the agreement specification attribute value change."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "listenToAgreementSpecificationStateChangeEvent",
      "type": "POST",
      "path": "/listener/agreementSpecificationStateChangeEvent",
      "description": "This endpoint allows a client to listen for an AgreementSpecificationStateChangeEvent notification. When the state of an agreement specification changes, this event is triggered and the client is notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data which contains the details of the changed state in the agreement specification."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the client has been notified of the agreement specification state change."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "listenToAgreementSpecificationDeleteEvent",
      "type": "POST",
      "path": "/listener/agreementSpecificationDeleteEvent",
      "description": "This endpoint allows a client to listen for an AgreementSpecificationDeleteEvent notification. When an agreement specification is deleted, this event is triggered and the client is notified.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data which contains the details of the deleted agreement specification."
        }
      ],
      "response": {
        "type": "object",
        "description": "A confirmation that the client has been notified of the agreement specification deletion."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the resource.",
        "404: Not Found - Resource could not be found.",
        "405: Method Not allowed - Requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    }
  ]
}