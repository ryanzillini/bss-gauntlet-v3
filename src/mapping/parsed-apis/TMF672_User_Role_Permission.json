{
  "api": "TMF672_User_Role_Permission",
  "version": "v5.0.0",
  "endpoints": [
    {
      "name": "listPermission",
      "type": "GET",
      "path": "/permission",
      "description": "This operation list or find Permission entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "permission"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createPermission",
      "type": "POST",
      "path": "/permission",
      "description": "This operation creates a Permission entity.",
      "parameters": [
        {
          "name": "permission",
          "required": true,
          "description": "The Permission to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Permission_Create"
          }
        }
      ],
      "tags": [
        "permission"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrievePermission",
      "type": "GET",
      "path": "/permission/{id}",
      "description": "This operation retrieves a Permission entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Permission",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "permission"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchPermission",
      "type": "PATCH",
      "path": "/permission/{id}",
      "description": "This operation updates partially a Permission entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the Permission",
          "in": "path"
        },
        {
          "name": "permission",
          "required": true,
          "description": "The Permission to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/Permission_Update"
          }
        }
      ],
      "tags": [
        "permission"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listUserRole",
      "type": "GET",
      "path": "/userRole",
      "description": "This operation list or find UserRole entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "userRole"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createUserRole",
      "type": "POST",
      "path": "/userRole",
      "description": "Creates a new UserRole entity. This operation is used to define a new user role within the system.",
      "parameters": [
        {
          "name": "userRole",
          "type": "object",
          "required": true,
          "description": "The UserRole object that needs to be added to the system. This object should be included in the request body."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns the created UserRole object."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the requested resource.",
        "405: Method Not allowed - The requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "retrieveUserRole",
      "type": "GET",
      "path": "/userRole/{id}",
      "description": "Retrieves a specific UserRole entity by its unique identifier. You can also specify certain attributes to be returned in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the UserRole entity to be retrieved. This identifier should be included in the path."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "A comma-separated list of properties to be returned in the response. This parameter should be included in the query string."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns the requested UserRole object."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the requested resource.",
        "404: Not Found - The requested resource could not be found.",
        "405: Method Not allowed - The requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "patchUserRole",
      "type": "PATCH",
      "path": "/userRole/{id}",
      "description": "Partially updates a UserRole entity. This operation allows you to update specific attributes of a UserRole without needing to send the entire object.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the UserRole entity to be updated. This identifier should be included in the path."
        },
        {
          "name": "userRole",
          "type": "object",
          "required": true,
          "description": "The UserRole object that contains the updated values. This object should be included in the request body."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns the updated UserRole object."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the requested resource.",
        "404: Not Found - The requested resource could not be found.",
        "405: Method Not allowed - The requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "createCheckPermission",
      "type": "POST",
      "path": "/checkPermission",
      "description": "Creates a new CheckPermission entity. This operation is used to define a new permission check within the system.",
      "parameters": [
        {
          "name": "checkPermission",
          "type": "object",
          "required": true,
          "description": "The CheckPermission object that needs to be added to the system. This object should be included in the request body."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns the created CheckPermission object."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the requested resource.",
        "405: Method Not allowed - The requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "listAssetGroup",
      "type": "GET",
      "path": "/assetGroup",
      "description": "Lists or finds AssetGroup entities. This operation allows you to retrieve a list of AssetGroup entities, with the option to specify which attributes to include in the response.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "A comma-separated list of properties to be returned in the response. This parameter should be included in the query string."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index of the resources to be returned. This parameter should be included in the query string."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of resources to be returned. This parameter should be included in the query string."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns a list of AssetGroup objects."
      },
      "errors": [
        "400: Bad Request - The request could not be understood or was missing required parameters.",
        "401: Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
        "403: Forbidden - Authentication succeeded but authenticated user doesn't have access to the requested resource.",
        "404: Not Found - The requested resource could not be found.",
        "405: Method Not allowed - The requested method is not supported for the specified resource.",
        "409: Conflict - The request could not be completed due to a conflict with the current state of the resource.",
        "500: Internal Server Error - An error occurred on the server."
      ]
    },
    {
      "name": "createAssetGroup",
      "type": "POST",
      "path": "/assetGroup",
      "description": "This operation creates a AssetGroup entity.",
      "parameters": [
        {
          "name": "assetGroup",
          "required": true,
          "description": "The AssetGroup to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AssetGroup_Create"
          }
        }
      ],
      "tags": [
        "assetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveAssetGroup",
      "type": "GET",
      "path": "/assetGroup/{id}",
      "description": "This operation retrieves a AssetGroup entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the AssetGroup",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "assetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "updateAssetGroup",
      "type": "PUT",
      "path": "/assetGroup/{id}",
      "description": "This operation updates a AssetGroup entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the AssetGroup",
          "in": "path"
        },
        {
          "name": "assetGroup",
          "required": true,
          "description": "The AssetGroup to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AssetGroup_Update"
          }
        }
      ],
      "tags": [
        "assetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchAssetGroup",
      "type": "PATCH",
      "path": "/assetGroup/{id}",
      "description": "This operation updates partially a AssetGroup entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the AssetGroup",
          "in": "path"
        },
        {
          "name": "assetGroup",
          "required": true,
          "description": "The AssetGroup to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AssetGroup_Update"
          }
        }
      ],
      "tags": [
        "assetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteAssetGroup",
      "type": "DELETE",
      "path": "/assetGroup/{id}",
      "description": "This operation deletes a AssetGroup entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the AssetGroup",
          "in": "path"
        }
      ],
      "tags": [
        "assetGroup"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listJsonPathAssetGroup",
      "type": "GET",
      "path": "/jsonPathAssetGroup",
      "description": "Retrieves a list of JSONPathAssetGroup entities. You can filter the results by specifying the properties you want in the response.",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want in the response, separated by commas."
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "The starting index from where the list of resources will be returned."
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "The maximum number of resources to return in the response."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested JSONPathAssetGroup entities."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createJsonPathAssetGroup",
      "type": "POST",
      "path": "/jsonPathAssetGroup",
      "description": "Creates a new JSONPathAssetGroup entity. The new entity must be provided in the request body.",
      "parameters": [
        {
          "name": "jsonPathAssetGroup",
          "required": true,
          "description": "The JSONPathAssetGroup entity to be created. This must be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/JSONPathAssetGroup_Create"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the created JSONPathAssetGroup entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveJsonPathAssetGroup",
      "type": "GET",
      "path": "/jsonPathAssetGroup/{id}",
      "description": "Retrieves a specific JSONPathAssetGroup entity by its ID. You can specify the properties you want in the response.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the JSONPathAssetGroup entity you want to retrieve."
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Specify the properties you want in the response, separated by commas."
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the requested JSONPathAssetGroup entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "updateJsonPathAssetGroup",
      "type": "PUT",
      "path": "/jsonPathAssetGroup/{id}",
      "description": "Updates a specific JSONPathAssetGroup entity by its ID. The updated entity must be provided in the request body.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the JSONPathAssetGroup entity you want to update."
        },
        {
          "name": "jsonPathAssetGroup",
          "required": true,
          "description": "The updated JSONPathAssetGroup entity. This must be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/JSONPathAssetGroup_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the updated JSONPathAssetGroup entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchJsonPathAssetGroup",
      "type": "PATCH",
      "path": "/jsonPathAssetGroup/{id}",
      "description": "Partially updates a specific JSONPathAssetGroup entity by its ID. The updated entity must be provided in the request body.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The ID of the JSONPathAssetGroup entity you want to partially update."
        },
        {
          "name": "jsonPathAssetGroup",
          "required": true,
          "description": "The updated JSONPathAssetGroup entity. This must be included in the request body.",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/JSONPathAssetGroup_Update"
          }
        }
      ],
      "response": {
        "type": "object",
        "description": "A successful response will return an object containing the partially updated JSONPathAssetGroup entity."
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "deleteJsonPathAssetGroup",
      "type": "DELETE",
      "path": "/jsonPathAssetGroup/{id}",
      "description": "This operation deletes a JSONPathAssetGroup entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the JSONPathAssetGroup",
          "in": "path"
        }
      ],
      "tags": [
        "jsonPathAssetGroup"
      ],
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listFilterAssetGroup",
      "type": "GET",
      "path": "/filterAssetGroup",
      "description": "This operation list or find FilterAssetGroup entities",
      "parameters": [
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to be provided in response",
          "in": "query"
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Requested index for start of resources to be provided in response",
          "in": "query"
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Requested number of resources to be provided in response",
          "in": "query"
        }
      ],
      "tags": [
        "filterAssetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "createFilterAssetGroup",
      "type": "POST",
      "path": "/filterAssetGroup",
      "description": "This operation creates a FilterAssetGroup entity.",
      "parameters": [
        {
          "name": "filterAssetGroup",
          "required": true,
          "description": "The FilterAssetGroup to be created",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/FilterAssetGroup_Create"
          }
        }
      ],
      "tags": [
        "filterAssetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Created"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "retrieveFilterAssetGroup",
      "type": "GET",
      "path": "/filterAssetGroup/{id}",
      "description": "This operation retrieves a FilterAssetGroup entity. Attribute selection is enabled for all first level attributes.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the FilterAssetGroup",
          "in": "path"
        },
        {
          "name": "fields",
          "type": "string",
          "required": false,
          "description": "Comma-separated properties to provide in response",
          "in": "query"
        }
      ],
      "tags": [
        "filterAssetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Success"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "updateFilterAssetGroup",
      "type": "PUT",
      "path": "/filterAssetGroup/{id}",
      "description": "This operation updates a FilterAssetGroup entity.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Identifier of the FilterAssetGroup",
          "in": "path"
        },
        {
          "name": "filterAssetGroup",
          "required": true,
          "description": "The FilterAssetGroup to be updated",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/FilterAssetGroup_Update"
          }
        }
      ],
      "tags": [
        "filterAssetGroup"
      ],
      "response": {
        "type": "object",
        "description": "Updated"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "patchFilterAssetGroup",
      "type": "PATCH",
      "path": "/filterAssetGroup/{id}",
      "description": "This endpoint allows you to partially update a FilterAssetGroup entity by providing the entity's unique identifier and the updated data.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the FilterAssetGroup entity you wish to update."
        },
        {
          "name": "filterAssetGroup",
          "type": "object",
          "required": true,
          "description": "The updated FilterAssetGroup data in JSON format."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns the updated FilterAssetGroup entity."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "deleteFilterAssetGroup",
      "type": "DELETE",
      "path": "/filterAssetGroup/{id}",
      "description": "This endpoint allows you to delete a FilterAssetGroup entity by providing the entity's unique identifier.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the FilterAssetGroup entity you wish to delete."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns a confirmation message upon successful deletion."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "registerListener",
      "type": "POST",
      "path": "/hub",
      "description": "This endpoint allows you to set the communication endpoint address that the service instance will use to deliver information about its health state, execution state, failures, and metrics.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "The data containing the callback endpoint to deliver the information in JSON format."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns a confirmation message upon successful subscription."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "unregisterListener",
      "type": "DELETE",
      "path": "/hub/{id}",
      "description": "This endpoint allows you to reset the communication endpoint address that the service instance uses to deliver information about its health state, execution state, failures, and metrics.",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "The unique identifier of the registered listener you wish to unregister."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns a confirmation message upon successful unsubscription."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "listenToPermissionCreateEvent",
      "type": "POST",
      "path": "/listener/permissionCreateEvent",
      "description": "This endpoint allows a client listener to receive the notification PermissionCreateEvent.",
      "parameters": [
        {
          "name": "data",
          "type": "object",
          "required": true,
          "description": "The event data in JSON format."
        }
      ],
      "response": {
        "type": "object",
        "description": "Returns a confirmation message upon successful notification."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "listenToPermissionAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/permissionAttributeValueChangeEvent",
      "description": "This endpoint allows a client to listen for and receive notifications of PermissionAttributeValueChangeEvents. It's typically used to track changes in permission attribute values.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which should conform to the PermissionAttributeValueChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the server has successfully received the notification."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "listenToPermissionStateChangeEvent",
      "type": "POST",
      "path": "/listener/permissionStateChangeEvent",
      "description": "This endpoint allows a client to listen for and receive notifications of PermissionStateChangeEvents. It's typically used to monitor changes in the state of permissions.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which should conform to the PermissionStateChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the server has successfully received the notification."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "listenToPermissionDeleteEvent",
      "type": "POST",
      "path": "/listener/permissionDeleteEvent",
      "description": "This endpoint allows a client to listen for and receive notifications of PermissionDeleteEvents. It's typically used to track when permissions are deleted.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which should conform to the PermissionDeleteEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the server has successfully received the notification."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "listenToUserRoleCreateEvent",
      "type": "POST",
      "path": "/listener/userRoleCreateEvent",
      "description": "This endpoint allows a client to listen for and receive notifications of UserRoleCreateEvents. It's typically used to monitor when new user roles are created.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which should conform to the UserRoleCreateEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the server has successfully received the notification."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "listenToUserRoleAttributeValueChangeEvent",
      "type": "POST",
      "path": "/listener/userRoleAttributeValueChangeEvent",
      "description": "This endpoint allows a client to listen for and receive notifications of UserRoleAttributeValueChangeEvents. It's typically used to track changes in user role attribute values.",
      "parameters": [
        {
          "name": "data",
          "type": "body",
          "required": true,
          "description": "The event data, which should conform to the UserRoleAttributeValueChangeEvent schema."
        }
      ],
      "response": {
        "type": "object",
        "description": "A response indicating that the server has successfully received the notification."
      },
      "errors": [
        "400: Bad Request - The server could not understand the request due to invalid syntax.",
        "401: Unauthorized - The client must authenticate itself to get the requested response.",
        "403: Forbidden - The client does not have access rights to the content.",
        "404: Not Found - The server can not find the requested resource.",
        "405: Method Not allowed - The method specified in the request is not allowed.",
        "409: Conflict - This response is sent when a request conflicts with the current state of the server.",
        "500: Internal Server Error - The server has encountered a situation it doesn't know how to handle."
      ]
    },
    {
      "name": "listenToUserRoleStateChangeEvent",
      "type": "POST",
      "path": "/listener/userRoleStateChangeEvent",
      "description": "Example of a client listener for receiving the notification UserRoleStateChangeEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UserRoleStateChangeEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    },
    {
      "name": "listenToUserRoleDeleteEvent",
      "type": "POST",
      "path": "/listener/userRoleDeleteEvent",
      "description": "Example of a client listener for receiving the notification UserRoleDeleteEvent",
      "parameters": [
        {
          "name": "data",
          "required": true,
          "description": "The event data",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UserRoleDeleteEvent"
          }
        }
      ],
      "tags": [
        "notification listeners (client side)"
      ],
      "response": {
        "type": "object",
        "description": "Notified"
      },
      "errors": [
        "400: Bad Request",
        "401: Unauthorized",
        "403: Forbidden",
        "404: Not Found",
        "405: Method Not allowed",
        "409: Conflict",
        "500: Internal Server Error"
      ]
    }
  ]
}